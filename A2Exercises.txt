3.1.1 Exercises, p56

1. Click on the image link at GitHub to verify that the git push succeeded.

2. At this point, the number of commits is large enough that the output of
git log -p is probably too big to fit in your terminal window. Confirm
that running git log -p drops you into a less interface for easier
navigation.
*** refer to text output 3.1.1-2.txt for the details of the log 


3. Use your knowledge of less commands to search for the commit that
added the HTML DOCTYPE. What is the SHA of the commit?

*** answer ***
commit 88f131759622623ec72f6e6ead78fc536b866159
Author: Eddie C. <edimc2000@gmail.com>
Date:   Sun Oct 26 12:44:39 2025 -0500

    Add some HTML structure

--------------------------
3.2.1 Exercises, p58

1. Commit the .gitignore file to your repository. Hint: Running git
commit -am isn’t enough. Why not?

2. Push your commit up to GitHub and confirm using the web interface that
the push succeeded.

--------------------------

3.3.2 Exercises
1. Use the command git branch -d about-page to delete the topic
branch. Confirm by running git branch that only the main branch is
left.

2. In Listing 3.3, we used git checkout -b to create a branch and check
it out at the same time, but it’s also possible to break this into two steps.
As a first step, use git branch to make a branch with the name test-branch.
(This involves passing an argument to git branch, as in git branch
<branch name>.) Then confirm that the new branch exists but isn’t
currently checked out by running git branch without an argument.

3. Check out test-branch and use touch to add a file with a name of
your choice, then add and commit it to the repository.

4. Check out the main branch and try deleting the test branch using git
branch -d to confirm that it doesn’t work. The reason is that, in contrast
to the about-page branch, the test branch hasn’t been merged into
main, and by design -d doesn’t work in this case. Because we don’t
actually want its changes, delete the test by using the related -D option,
which deletes the branch in question even if its changes are unmerged.

--------------------------

3.4.1 Exercises

1. The git checkout -f trick works only with files that are staged for
commit or are already part of the repository, but sometimes you want to
get rid of new files as well. Using touch, create a file with a name of
your choice, then git add it. Verify that running git checkout -f
gets rid of it.

2. Like many other Unix programs, git accepts both “short form” and
“long form” options. Repeat the previous exercise with git checkout
--force to confirm that the effects of -f and --force are identical.
Extra credit: Doublecheck
this conclusion by finding the “force” option
in the output of git help checkout.

--------------------------
4.1.1 Exercises

1. As Alice, run git log to verify that the commit was pulled down correctly.
Doublecheck the details using git log -p.
*** output 4.1.1-1output.txt

2. The whale picture added in Listing 3.1 (Figure 3.1) requires attribution
under the Creative Commons AttributionNoDerivs 2.0 Generic license.
As Alice, link the image to the original attribution page, as shown in
Listing 4.1. Commit the result and push to GitHub.

3. As Bob, pull in the changes from the previous exercise. Verify by refreshing
the browser and by running git log -p that Bob’s repo has
been properly updated.

--------------------------
4.2.3 Exercises

1. Change your default Git editor from Vim to Atom. Hint: Google for
it. (This is an absolutely classic application of technical sophistication
(Box 1.2): With a wellchosen Google search, you can often go from “I
have no idea how to do this” to “It’s done” in under 30 seconds.)

2. The polar bear picture added in Listing 4.3 (Figure 4.11) requires attribution
under the Creative Commons Attribution 2.0 Generic license. As Alice,
link the image to the original attribution page, as shown in Listing 4.8.
Then run git commit -a without including -m and a commandline
message. This should drop you into the default Git editor. Quit the editor
without including a message, which cancels the commit.

3. Run git commit -a again, but this time add the commit message “Add
polar bear attribution link”. Then hit return a couple of times and add a
longer message of your choice. (One example appears in Figure 4.17.)
Save the message and exit the editor.

4. Run git log to confirm that both the short and longer messages correctly
appear. After pushing the changes to GitHub, navigate to the page
for the commit to confirm that both the short and longer messages correctly
appear.

5. As Bob, pull in the changes to the About page. Verify by refreshing the
browser and by running git log -p that Bob’s repo has been properly
updated.

-------------------------
4.3.1 Exercises

1. Bob’s main branch doesn’t currently have Alice’s merge, so check out
main as Bob and do a git pull. Confirm using git log that Alice’s
merge commit is now present.

2. Delete the fix-trademark branch locally. Do you need to use the -D
option (Section 3.3.2), or is -d sufficient?

3. Delete the remote fix-trademark branch on GitHub. Hint: If you get
stuck, Google for it.

*** git push origin :fix-trademark